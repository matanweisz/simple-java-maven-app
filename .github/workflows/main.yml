name: Java CI with Maven

on:
  push:
    branches: [ "master" ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    # Checkout
    - uses: actions/checkout@v4
    
    # Setup
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven    

    # Test
    - name: Test with Maven
      run: mvn test
  
  build:
    needs: test  # This job runs after 'test'
    runs-on: ubuntu-latest
    
    steps:
    # Checkout
    - uses: actions/checkout@v4   

    # Get current version
    - name: Get current version
      id: get_version
      run: echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

    # Increment patch version (major.minor.patch)
    - name: Increment patch version
      id: bump_version
      run: |
        VERSION=${{ env.VERSION }}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo $NEW_VERSION > VERSION

    # Commit and push updated VERSION file
    - name: Commit and push new version
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        git add VERSION
        git commit -m "Bump version to ${{ env.NEW_VERSION }}"
        git tag "v${{ env.NEW_VERSION }}"
        git push origin master --tags

    # Login to DockerHub
    - name: Log in to DockerHub
      run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    # Build Docker image with version tag
    - name: Build Docker Image
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/simple-java-maven-app:${{ env.NEW_VERSION }} .

    # Push Docker image with version tag
    - name: Push Docker Image
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/simple-java-maven-app:${{ env.NEW_VERSION }}

    # Tag the Docker image with latest tag
    - name: Build Docker Image
      run: docker tag ${{ secrets.DOCKERHUB_USERNAME }}/simple-java-maven-app:${{ env.NEW_VERSION }} ${{ secrets.DOCKERHUB_USERNAME }}/simple-java-maven-app:latest

    # Push Docker image with latest tag
    - name: Push Docker Image
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/simple-java-maven-app:latest
  
  deploy:
    needs: build  # Run only after Docker image is built & pushed
    runs-on: ubuntu-latest

    steps:
    # Deploying the latest image on the EC2
    - name: Deploy to AWS EC2
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "Checking if Docker is installed..."
          if ! command -v docker &> /dev/null
          then
              echo "Docker not found. Installing Docker..."
              sudo apt update -y
              sudo apt install -y docker.io
              sudo systemctl enable docker
              sudo systemctl start docker
          fi

          echo "Logging in to DockerHub..."
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

          echo "Pulling latest Docker image..."
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/simple-java-maven-app:latest

          echo "Stopping and removing old container..."
          sudo docker stop java-app || true
          sudo docker rm java-app || true

          echo "Running new container..."
          sudo docker run -d --name java-app ${{ secrets.DOCKERHUB_USERNAME }}/simple-java-maven-app:latest
